#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');            //starting application by calling app.js
var debug = require('debug')('nsecom:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var fs = require('fs');

var cluster = require('cluster');
var os      = require('os');

var numCPUs = 4;
/*if (cluster.isMaster) {

  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();

    cluster.on('listening', function (worker, address) {
      // console.log(worker.id + "_____" + worker.process.pid);
    });

    //give message on console and create a new worker porcess when a worker process dies

    cluster.on('exit', function (worker, code, signal)
    {
      //console.log("worker process with #" + worker.process.pid + "died");
      //  cluster.fork(); //create the new worker process
    });

  }

} else */{



  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  process.on('uncaughtException', function (err) {
    console.log((new Date).toUTCString() + ' uncaughtException:', err.message);
    console.log(err.stack);
    process.exit(1)
  });


  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  console.log("Server is listening on : http://localhost:%s",port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);

  }

}


